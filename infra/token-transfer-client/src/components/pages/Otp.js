import React, { Component } from 'react'
import { connect } from 'react-redux'
import request from 'superagent'

import { formInput, formFeedback } from '../../utils/formHelpers'
import { setSessionEmail } from '../../actions'

class Login extends Component {
  state = {
    otpQrUrl: null,
    otpKey: null,
    otpCode: '',
    otpCodeError: null
  }

  componentDidMount() {
    this.handleOtpSetup()
  }

  handleOtpSetup = async () => {
    let response
    try {
      const apiUrl = process.env.PORTAL_API_URL || 'http://localhost:5000'
      response = await request.post(`${apiUrl}/api/setup_totp`)
    } catch (error) {
      this.setState({ otpError: 'An error occurred configuring OTP.' })
      return
    }

    const json = response.json()
    if (!json.otpQrUrl || !json.otpKey) {
      this.setState({ otpError: 'An error occurred configuring OTP.' })
      return
    }

    this.setState({
      otpQrUrl: response.otpQrUrl,
      otpKey: response.otpKey
    })
  }

  handleOtpSetupDone = async () => {
    this.setState({ loginStep: 'enterOtpCode' })
  }

  handleVerifyOtpCode = async () => {
    try {
      const apiUrl = process.env.PORTAL_API_URL || 'http://localhost:5000'
      await request.post(`${apiUrl}/api/verify_totp`)
    } catch (error) {
      this.setState({ otpCodeError: 'Invalid OTP code.' })
      return
    }

    this.props.setSessionEmail(this.state.email)
  }

  render() {
    if (!this.state.otpKey) {
      return this.renderSetupOtp()
    } else {
      return this.renderEnterOtpCode()
    }
  }

  renderSetupOtp() {
    return (
      <div className="action-card">
        <h1>Scan QR code</h1>
        <p>Open Google Authenticator and scan the barcode or enter the key</p>
        <img src={this.state.otpQrUrl} />
        <p>
          <strong>Secret Key:</strong>
        </p>
        <p>{this.state.otpCode}</p>
        <div className="alert">
          Store this secret key somewhere safe and don&apos;t share it with
          anyone else.
        </div>
      </div>
    )
  }

  renderEnterOtpCode() {
    const input = formInput(this.state, state => this.setState(state))
    const Feedback = formFeedback(this.state)
    return (
      <div className="action-card">
        <h1>2-Step Verification</h1>
        <p>Enter the code generated by your authenticator app</p>
        <div className="form-group">
          <label htmlFor="email">QR Code</label>
          <input {...input('otpCode')} />
          {Feedback('otpCode')}
        </div>
        <button
          className="btn btn-primary btn-lg"
          style={{ marginTop: '40px' }}
          onClick={this.handleVerifyOtpCode}
        >
          Continue
        </button>
      </div>
    )
  }
}

const mapStateToProps = state => {
  return {
    sessionEmail: state.sessionEmail
  }
}

const mapDispatchToProps = dispatch => {
  return {
    setSessionEmail: email => dispatch(setSessionEmail(email))
  }
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(Login)
