apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "ipfs.fullname" . }}
  labels:
    app: {{ template "ipfs.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "ipfs.fullname" . }}
  serviceName: {{ template "ipfs.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "ipfs.fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
    spec:
      containers:
      - name: {{ template "ipfs.fullname" . }}
        image: "{{ .Values.ipfsImage }}:{{ .Values.ipfsImageTag }}"
        command: ["/usr/local/bin/start_ipfs"]
        ports:
        - containerPort: 5001
          name: api
        - containerPort: 8080
          name: gateway
        volumeMounts:
          - mountPath: /data/ipfs
            name: {{ template "ipfs.fullname" . }}-data
        resources:
          requests:
            memory: 1Gi
            cpu: 500m
      {{- if ne .Release.Namespace "prod" }}
      containers:
        - name: {{ template "ipfsProxy.fullname" . }}
          image: "{{ .Values.ipfsProxyImage }}:{{ .Values.ipfsProxyImageTag }}"
          ports:
          - containerPort: 9999
            name: proxy
          env:
          - name: "IPFS_API_URL"
            value: "http://127.0.0.1:5001"
          - name: "IPFS_GATEWAY_URL"
            value: "http://127.0.0.1:8080"
      {{- end }}
   volumeClaimTemplates:
  - metadata:
      name: {{ template "ipfs.fullname" . }}-data
    spec:
      storageClassName: "standard"
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ default "8Gi" .Values.ipfsStorageRequestSize }}
