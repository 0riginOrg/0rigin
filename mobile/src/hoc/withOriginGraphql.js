'use strict'

/* Allows for the execution of GraphQL queries and mutations via the `window.gql`
 * client on the marketplace. This stores and resolves deferred promises to provide
 * a nicer interface to executing queries (i.e. standard promises rather than
 * having to use DeviceEventEmitter to emit/listen.
 */

import uuid from 'uuid/v1'
import React, { Component } from 'react'
import { DeviceEventEmitter } from 'react-native'
import { connect } from 'react-redux'
import get from 'lodash.get'

import {
  balance,
  growthEligible,
  identity,
  tokenBalance,
  wallet
} from 'graphql/queries'
import { growthEnroll, deployIdentity } from 'graphql/mutations'

const withOriginGraphql = WrappedComponent => {
  class WithOriginGraphql extends Component {
    constructor(props) {
      super(props)
      this.state = {
        deferredPromises: []
      }
      DeviceEventEmitter.addListener('graphqlResult', this._handleGraphqlResult)
      DeviceEventEmitter.addListener('graphqlError', this._handleGraphqlError)
    }

    _sendGraphqlQuery = (query, variables) => {
      const { promiseId, promise } = this._generatePromise()
      DeviceEventEmitter.emit('graphqlQuery', promiseId, query, variables)
      return promise
    }

    _sendGraphqlMutation = (mutation, variables) => {
      const { promiseId, promise } = this._generatePromise()
      DeviceEventEmitter.emit('graphqlMutation', promiseId, mutation, variables)
      return promise
    }

    _generatePromise = () => {
      const promiseId = uuid()
      const promise = new Promise((resolve, reject) => {
        this.setState(prevState => {
          return {
            ...prevState,
            deferredPromises: {
              ...prevState.deferredPromises,
              [promiseId]: { resolve, reject }
            }
          }
        })
      })
      return { promiseId, promise }
    }

    _handleGraphqlResult = ({ id, response }) => {
      // Promise was not necessarily generated by this HOC
      // TODO move to redux?
      if (this.state.deferredPromises[id]) {
        this.state.deferredPromises[id].resolve(response)
      }
    }

    _handleGraphqlError = ({ id, error }) => {
      // Promise was not necessarily generated by this HOC
      // TODO move to redux?
      if (this.state.deferredPromises[id]) {
        this.state.deferredPromises[id].reject(error)
      }
    }

    getBalance = ethAddress => {
      return this._sendGraphqlQuery(balance, { id: ethAddress })
    }

    getTokenBalance = (ethAddress, token) => {
      return this._sendGraphqlQuery(tokenBalance, {
        id: ethAddress,
        token: token
      })
    }

    getIdentity = async (id) => {
      return this._sendGraphqlQuery(identity, { id })
    }

    getWallet = () => {
      return this._sendGraphqlQuery(wallet)
    }

    getGrowthEligibility = () => {
      return this._sendGraphqlQuery(growthEligible)
    }

    publishIdentity = (from, profile, attestations) => {
      return this._sendGraphqlMutation(deployIdentity, {
        from,
        profile,
        attestations
      })
    }

    growthEnroll = vars => {
      return this._sendGraphqlMutation(growthEnroll, vars)
    }

    render() {
      return (
        <WrappedComponent
          getBalance={this.getBalance}
          getGrowthEligibility={this.getGrowthEligibility}
          getIdentity={this.getIdentity}
          getTokenBalance={this.getTokenBalance}
          getWallet={this.getWallet}
          publishIdentity={this.publishIdentity}
          growthEnroll={this.growthEnroll}
          {...this.props}
        />
      )
    }
  }

  const mapStateToProps = ({ marketplace }) => {
    return { marketplace }
  }

  return connect(mapStateToProps)(WithOriginGraphql)
}

export default withOriginGraphql
