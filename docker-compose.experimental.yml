version: "3"

services:
  postgres:
    container_name: postgres
    restart: always
    image: postgres:10.0
    environment:
      - POSTGRES_USER=origin
      - POSTGRES_PASSWORD=origin
      - POSTGRES_DB=origin

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch
    build:
      context: .
      dockerfile: development/dockerfiles/elasticsearch
    ports:
      - "9200:9200"
    environment:
      network.bind_host: 0
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    logging:
      driver: none

  origin-dapp2:
    container_name: origin-dapp2
    image: origin-experimental
    build:
      context: .
      dockerfile: Dockerfile-experimental
    depends_on:
      - origin-messaging
    volumes: &volumes
      # origin-contracts build directory, the DApp will run a contract deploy
      # and the contract address here, and other services will then parse these
      # build files to extract contract addresses
      - ./origin-contracts/build:/app/origin-contracts/build
      - ./origin-contracts/package.json:/app/origin-contracts/package.json
      # origin-dapp2
      - ./experimental/origin-dapp2/src:/app/experimental/origin-dapp2/src
      - ./experimental/origin-dapp2/public:/app/experimental/origin-dapp2/public
      - ./experimental/origin-dapp2/translations:/app/experimental/origin-dapp2/translations
      - ./experimental/origin-dapp2/webpack.config.js:/app/experimental/origin-dapp2/webpack.config.js
      - ./experimental/origin-dapp2/package.json:/app/experimental/origin-dapp2/package.json
      - ./experimental/origin-dapp2/index.js:/app/experimental/origin-dapp2/index.js
      # origin-services
      - ./experimental/origin-services/data:/app/experimental/origin-services/data
      - ./experimental/origin-services/index.js:/app/experimental/origin-services/index.js
      # orogin-graphql
      - ./experimental/origin-graphql/src:/app/experimental/origin-graphql/src
      - ./experimental/origin-graphql/package.json:/app/experimental/origin-graphql/package.json
      # origin-eventsource
      - ./experimental/origin-eventsource/src:/app/experimental/origin-eventsource/src
      - ./experimental/origin-eventsource/package.json:/app/experimental/origin-eventsource/package.json
      # origin-ipfs
      - ./experimental/origin-ipfs/src:/app/experimental/origin-ipfs/src
      - ./experimental/origin-ipfs/package.json:/app/experimental/origin-ipfs/package.json
      # origin-messaging-client
      - ./experimental/origin-messaging-client/src:/app/experimental/origin-messaging-client/src
      - ./experimental/origin-messaging-client/package.json:/app/experimental/origin-messaging-client/package.json
      # origin-validator
      - ./experimental/origin-validator/src:/app/experimental/origin-validator/src
      - ./experimental/origin-validator/package.json:/app/experimental/origin-validator/package.json
      # origin-discovery
      - ./origin-discovery/src:/app/origin-discovery/src
      - ./origin-discovery/migrations:/app/origin-discovery/migrations
      - ./origin-discovery/config:/app/origin-discovery/config
      - ./origin-discovery/package.json:/app/origin-discovery/package.json
      # origin-ipfs-proxy
      - ./origin-ipfs-proxy/src:/app/origin-ipfs-proxy/src
      - ./origin-ipfs-proxy/package.json:/app/origin-ipfs-proxy/package.json
      # origin-messaging
      - ./origin-messaging/src:/app/origin-messaging/src
      - ./origin-messaging/package.json:/app/origin-messaging/package.json
      # origin-growth
      - ./origin-growth/src:/app/origin-growth/src
      - ./origin-growth/package.json:/app/origin-growth/package.json
    ports:
      - "3001:3001"
      - "8083:8083" # Webpack
      - "8545:8545"
    environment:
      - DEPLOY_CONTRACTS=true
      - DOCKER=true
    command: npm run start --prefix experimental/origin-dapp2

  origin-messaging:
    container_name: origin-messaging
    image: origin-experimental
    volumes: *volumes
    environment:
      - MESSAGING_NAMESPACE=dev
      - IPFS_REPO_PATH=/app/ipfs
    ports:
      - "9012:9012"
    command: npm run start --prefix origin-messaging

  origin-ipfs-proxy:
    container_name: origin-ipfs-proxy
    image: origin-experimental
    volumes: *volumes
    ports:
      - "9999:9999"
    environment:
      - IPFS_API_URL=http://origin-dapp2:5002
      - IPFS_GATEWAY_URL=http://origin-dapp2:9090
    command: npm run start --prefix origin-ipfs-proxy

  origin-event-listener:
    container_name: origin-event-listener
    image: origin-experimental
    volumes: *volumes
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - IPFS_URL=http://origin-ipfs-proxy:9999
      - WEB3_URL=http://origin-dapp2:8545
    depends_on:
      - postgres
      - elasticsearch
      - origin-dapp2
      - origin-ipfs-proxy
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q origin-dapp2:3001 --
      wait-for.sh -t 0 -q elasticsearch:9200 --
      npm run migrate --prefix origin-discovery &&
      npm run start:listener --prefix origin-discovery"

  origin-discovery:
    container_name: origin-discovery
    image: origin-experimental
    volumes: *volumes
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - IPFS_URL=http://origin-ipfs-proxy:9999
      - WEB3_URL=http://origin-dapp2:8545
    depends_on:
      - postgres
      - elasticsearch
    ports:
      - "4000:4000"
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q origin-dapp2:3001 &&
      npm run start:discovery --prefix origin-discovery"
