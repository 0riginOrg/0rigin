version: "3"

services:
  postgres:
    container_name: postgres
    restart: always
    image: postgres:10.0
    environment:
      - POSTGRES_USER=origin
      - POSTGRES_PASSWORD=origin
      - POSTGRES_DB=origin
    networks:
      - default

# ganache:
#   image: trufflesuite/ganache-cli
#   ports:
#     - "8545:8545"
#   volumes:
#     - ./.state/ganache:/db
#   entrypoint:
#     - node
#     - ./build/cli.node.js
#     - --mnemonic="candy maple cake sugar pudding cream honey rich smooth crumble sweet treat"
#     - --db=/db

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch
    build:
      context: .
      dockerfile: development/dockerfiles/elasticsearch
    ports:
      - "9200:9200"
    environment:
      network.bind_host: 0
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - default

  ipfs-proxy:
    container_name: ipfs-proxy
    image: ipfs-proxy
    build:
      context: .
      dockerfile: development/dockerfiles/ipfs-proxy
    ports:
      - "9999:9999"
    environment:
      - IPFS_API_URL=http://origin-js:5002
      - IPFS_GATEWAY_URL=http://origin-js:8080
    volumes:
      - ./ipfs-proxy:/app

  origin-js:
    container_name: origin-js
    image: origin-js
    build:
      context: .
      dockerfile: development/dockerfiles/origin-js
    ports:
      - "8545:8545"  # Ganache

  origin-discovery:
    container_name: origin-discovery
    image: origin-discovery
    build:
      context: .
      dockerfile: development/dockerfiles/origin-discovery
    volumes:
      - ./origin-js/src:/app/origin-js/src
      - ./origin-discovery/src:/app/origin-discovery/src
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - ELASTICSEARCH_HOST=elasticsearch:9200
    depends_on:
      - origin-js
      - postgres
      - elasticsearch
    ports:
      - "4000:4000" # Apollo

  event-listener:
    container_name: event-listener
    image: event-listener
    build:
      context: .
      dockerfile: development/dockerfiles/event-listener
    volumes:
      - ./origin-js/src:/app/origin-js/src
      - ./origin-discovery/src:/app/origin-discovery/src
    depends_on:
      - origin-js
      - postgres
      - elasticsearch
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - ELASTICSEARCH_HOST=elasticsearch:9200

  origin-messaging:
    container_name: origin-messaging
    image: origin-messaging
    build:
      context: .
      dockerfile: development/dockerfiles/origin-messaging
    ports:
      - "9012:9012"
    volumes:
      - ./origin-messaging/src:/app/src
      - ./development/.ipfs:/ipfs
    environment:
      - MESSAGING_NAMESPACE=dev

  origin-bridge:
    container_name: origin-bridge
    image: origin-bridge
    build:
      context: .
      dockerfile: development/dockerfiles/origin-bridge
    volumes:
      - ./origin-bridge:/app
      # Set the envfile from the local envfile
      - ./development/envfiles/origin-bridge.env:/app/.env
    depends_on:
      - postgres
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=/app/main.py

  origin-dapp:
    container_name: origin-dapp
    image: origin-dapp
    build:
      context: .
      dockerfile: development/dockerfiles/origin-dapp
    volumes:
      - ./origin-contracts/build:/app/origin-contracts/build
      - ./origin-js/src:/app/origin-js/src
      # Mount origin-dapp inside the container
      - ./origin-dapp/src:/app/src
      - ./origin-dapp/public:/app/public
      # Set the envfile from the local envfile
      - ./development/envfiles/origin-dapp.env:/app/.env
      - ./development/.ipfs:/ipfs
    depends_on:
      - origin-js
      - origin-messaging
      - origin-bridge
    environment:
      - IPFS_API_PORT=9999
      - IPFS_DOMAIN=localhost
      - IPFS_GATEWAY_PORT=9999
    ports:
      - "3000:3000"
    command: npm run dev -- --host 0.0.0.0 --watch-poll 500
