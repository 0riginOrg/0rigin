---
version: "3"

services:
  postgres:
    container_name: postgres
    restart: always
    image: postgres:10.10
    environment:
      - POSTGRES_USER=origin
      - POSTGRES_PASSWORD=origin
      - POSTGRES_DB=origin
    ports:
      - "5432:5432"

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:6.8.2
    ports:
      - "9200:9200"
    environment:
      network.bind_host: 0
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    logging:
      driver: none

  redis-master:
    container_name: redis-master
    image: 'bitnami/redis:latest'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - '6379:6379'

  services:
    container_name: services
    image: origin
    build:
      context: .
      dockerfile: Dockerfile
    volumes: &volumes
      - ./lerna.json:/app/lerna.json
      # Mount source code for all packages from host
      - ./packages/contracts/build:/app/packages/contracts/build
      # Contract migrations that get run when @origin/services starts
      - ./packages/contracts/migrations:/app/packages/contracts/migrations
      # Core packages
      - ./packages/services/:/app/packages/services/
      - ./packages/services/data/localhost.key:/app/packages/services/data/localhost.key
      - ./packages/services/data/localhost.cert:/app/packages/services/data/localhost.cert
      - ./packages/web3-provider/:/app/packages/web3-provider/
      - ./packages/graphql/:/app/packages/graphql/
      - ./packages/eventsource/:/app/packages/eventsource/
      - ./packages/event-cache/:/app/packages/event-cache/
      - ./packages/ip2geo/:/app/packages/ip2geo/
      - ./packages/ipfs/:/app/packages/ipfs/
      - ./packages/messaging-client/:/app/packages/messaging-client/
      - ./packages/mobile-bridge/:/app/packages/mobile-bridge/
      - ./packages/validator:/app/packages/validator/
      - ./packages/token/:/app/packages/token/
      # Infrastructure packages
      - ./infra/bridge/:/app/infra/bridge/
      - ./infra/discovery/:/app/infra/discovery/
      - ./infra/ipfs-proxy/:/app/infra/ipfs-proxy/
      - ./infra/messaging/:/app/infra/messaging/
      - ./infra/notifications/:/app/infra/notifications/
      - ./infra/growth/:/app/infra/growth/
      - ./infra/growth-event/:/app/infra/growth-event/
      - ./infra/identity/:/app/infra/identity/
      # Exclude IPFS and blockchain data from @origin/services
      - /app/packages/services/data
      # Exclude all node_modules from the host
      - /app/packages/services/node_modules/
      - /app/packages/graphql/node_modules/
      - /app/packages/eventsource/node_modules/
      - /app/packages/event-cache/node_modules/
      - /app/packages/ipfs/node_modules/
      - /app/packages/ip2geo/node_modules/
      - /app/packages/messaging-client/node_modules/
      - /app/packages/mobile-bridge/node_modules/
      - /app/packages/validator/node_modules/
      - /app/packages/token/node_modules/
      - /app/infra/bridge/node_modules/
      - /app/infra/discovery/node_modules/
      - /app/infra/ipfs-proxy/node_modules/
      - /app/infra/messaging/node_modules/
      - /app/infra/notifications/node_modules/
      - /app/infra/growth/node_modules/
      - /app/infra/growth-event/node_modules/
      - /app/infra/identity/node_modules/
    ports:
      # IPFS ports are exposed here for convenience but IPFS should be
      # interacted with via ipfs-proxy
      - "5002:5002"
      - "8080:8080"
      - "8545:8545"
    environment:
      - DOCKER=true
      - DEPLOY_CONTRACTS=true
      - DATABASE_URL=postgres://origin:origin@postgres/origin
    depends_on:
      - postgres
    command:
      >
      /bin/bash -c "npm run migrate --prefix infra/discovery &&
      npm run migrate --prefix infra/growth &&
      npm run migrate --prefix infra/growth-event &&
      npm run migrate --prefix infra/identity &&
      npm run migrate --prefix infra/notifications &&
      npm run migrate --prefix infra/bridge &&
      npm run migrate --prefix infra/messaging &&
      npm run start --prefix packages/services -- -g -i -p -f -t"

  messaging:
    container_name: messaging
    image: origin
    volumes: *volumes
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - REDIS_URL=redis://redis-master:6379
      - NOTIFICATIONS_ENDPOINT_URL=http://notifications:3456/messages
      - NETWORK=docker
    depends_on:
      - postgres
      - redis-master
    ports:
      - "6647:6647"
      - "9012:9012"
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q postgres:5432 --
      wait-for.sh -t 0 -q services:1111 --
      npm run start --prefix infra/messaging"

  ipfs-proxy:
    container_name: ipfs-proxy
    image: origin
    volumes: *volumes
    ports:
      - "9999:9999"
    environment:
      - IPFS_API_URL=http://services:5002
      - IPFS_GATEWAY_URL=http://services:8080
    command: npm run start --prefix infra/ipfs-proxy

  event-listener:
    container_name: event-listener
    image: origin
    volumes: *volumes
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - DISCORD_WEBHOOK=
      - ELASTICSEARCH=true
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - EMAIL_WEBHOOK=
      - GCLOUD_PUBSUB_TOPIC=
      - GCLOUD_PROJECT_ID=
      - INDEX_MARKETPLACE=true
      - INDEX_IDENTITY=true
      - INDEX_GROWTH=true
      - INDEX_PROXY=true
      - TRAIL_BEHIND_BLOCKS=
      - NETWORK=docker
      - NOTIFICATIONS_WEBHOOK=
      - DISCOVERY_AUTH_TOKEN=discovery_token
      - PROVIDER_URL=http://services:8545
      - IPFS_GATEWAY_URL=http://ipfs-proxy:9999
      - IPFS_API_URL=http://ipfs-proxy:9999
      - ENVKEY=
    depends_on:
      - postgres
      - elasticsearch
      - ipfs-proxy
      - services
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q elasticsearch:9200 --
      wait-for.sh -t 0 -q services:1111 --
      npm run start:listener --prefix infra/discovery"

  discovery:
    container_name: discovery
    image: origin
    volumes: *volumes
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - REDIS_URL=redis://redis-master:6379
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - ELASTICSEARCH=true
      - NETWORK=docker
      - DISCOVERY_AUTH_TOKEN=discovery_token
      - MODERATOR_ADDRESSES=0x627306090abaB3A6e1400e9345bC60c78a8BEf57,0xf17f52151EbEF6C7334FAD080c5704D77216b732
      - ENVKEY=
    depends_on:
      - postgres
      - elasticsearch
      - ipfs-proxy
      - services
    ports:
      - "4000:4000"
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q elasticsearch:9200 --
      wait-for.sh -t 0 -q services:1111 --
      node infra/discovery/devops/es-cli.js createIndex listings &&
      npm run start:discovery --prefix infra/discovery"

  graphql:
    container_name: graphql
    image: origin
    volumes: *volumes
    environment:
      - DOCKER=true
      - NETWORK=docker
      - GRAPHQL_SERVER_PORT=4007
      - PROVIDER_URL=http://services:8545
      - PROVIDER_WS_URL=ws://services:8545
      - IPFS_GATEWAY_URL=http://ipfs-proxy:9999
      - IPFS_API_URL=http://ipfs-proxy:9999
      - DISCOVERY_SERVER_URL=http://discovery:4000/graphql
      - DISCOVERY_AUTH_TOKEN=discovery_token
      - BRIDGE_SERVER_URL=http://bridge:5000
      - GROWTH_SERVER_URL=http://growth:4008
    depends_on:
      - discovery
    ports:
      - "4007:4007"
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q services:1111 --
      npm run start --prefix packages/graphql"

  notifications:
    container_name: notifications
    image: origin
    volumes: *volumes
    depends_on:
      - postgres
    environment:
      - APNS_BUNDLE_ID=com.originprotocol.catcher
      - APNS_KEY_FILE=
      - APNS_KEY_ID=
      - APNS_PRODUCTION=false
      - APNS_TEAM_ID=
      - DATABASE_URL=postgres://origin:origin@postgres/origin
        # Service account for Firebase
      - FIREBASE_SERVICE_JSON=
      - FIREBASE_DB_URL=
    ports:
      - "3456:3456"
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q postgres:5432 --
      wait-for.sh -t 0 -q services:1111 --
      npm run start --prefix infra/notifications"

  growth:
    container_name: growth
    image: origin
    volumes: *volumes
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - ENVKEY=
    depends_on:
      - postgres
    ports:
      - "4008:4008"
    command: npm run start --prefix infra/growth

  bridge:
    container_name: bridge
    image: origin
    volumes: *volumes
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - REDIS_URL=redis://redis-master:6379
      - FACEBOOK_CLIENT_ID=
      - FACEBOOK_CLIENT_SECRET=
      # Sendgrid settings for email attestations
      # sendgrid.com
      - SENDGRID_FROM_EMAIL=
      - SENDGRID_API_KEY=
      # Twilio verify API key for phone attestations
      # https://www.twilio.com/console/verify/applications
      - TWILIO_VERIFY_API_KEY
      - TWITTER_CONSUMER_KEY=
      - TWITTER_CONSUMER_SECRET=
      - ENVKEY=
    depends_on:
      - postgres
      - redis-master
    ports:
      - "5000:5000"
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q postgres:5432 --
      wait-for.sh -t 0 -q redis-master:6379 --
      wait-for.sh -t 0 -q services:1111 --
      npm run start --prefix infra/bridge"
