require('dotenv').config()
const passport = require('passport')
const { Strategy: LocalStrategy } = require('passport-local')
const { Strategy: JWTStrategy, ExtractJwt } = require('passport-jwt')
//const { JWT, JWK, JWE } = require('jose')
const bcrypt = require('bcrypt')
const { Seller } = require('../data/db')
const {
  PASSWORD_SALT_ROUNDS,
  JWT_SECRET,
  SERVER_HOSTNAME
} = require('../utils/const')

const AUTH_OPTS = {
  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
  secretOrKey: JWT_SECRET,
  issuer: SERVER_HOSTNAME
}

async function createSalt() {
  return await bcrypt.genSalt(PASSWORD_SALT_ROUNDS)
}

async function hashPassword(salt, password, saltRounds = PASSWORD_SALT_ROUNDS) {
  return await bcrypt.hash(password, salt)
}

function hashFromDB(dbval) {
  return dbval.split(':')
}

function hashToDB(salt, passwordHash, saltRounds = PASSWORD_SALT_ROUNDS) {
  return arguments.join(':')
}

passport.use(
  new JWTStrategy(AUTH_OPTS, async (payload, done) => {
    console.log('jwt payload', payload)
    throw new Error('BREAK')
    try {
      const record = await Auth.findOne({
        where: {
          token: payload
        },
        raw: true
      })
      if (!record) return done(null, false)

      // Remove sensitive data
      delete record.password

      return done(null, record)
    } catch (err) {
      return done(err, false)
    }
  })
)

passport.use(
  new LocalStrategy(
    {
      usernameField: 'email',
      passwordField: 'password'
    },
    async (email, password, cb) => {
      try {
        const seller = await Seller.findOne({
          where: {
            email
          }
        })

        if (!seller) {
          console.log(`User ${email} not found`)
          return cb(null, false, { message: 'Login failed.' })
        }

        const [saltRounds, salt, passwordHash] = hashFromDB(seller.password)
        const checkHash = await hashPassword(salt, password, saltRounds)

        if (passwordHash !== checkHash) {
          console.log(`Password hash does not match for ${email}`)
          return cb(null, false, { message: 'Login failed.' })
        }

        return cb(null, seller, {
          message: 'Logged In Successfully'
        })
      } catch (err) {
        return cb(err)
      }
    }
  )
)

module.exports = {
  createSalt,
  hashPassword,
  hashToDB,
  passport,
  middleware: passport.authenticate('bearer', { session: false })
}
