---
git:
  depth: 1
matrix:
  include:
    - name: "origin-bridge tests"
      language: python
      python: 3.6
      before_script:
        - cd origin-bridge
        - pip install -r requirements.txt
      script:
        - pytest --flakes --codestyle

    - name: "linting"
      language: node_js
      node_js: 10
      cache:
        npm: true
        directories:
          - node_modules
      before_cache:
        - rm -rf node_modules/.cache
      install:
        - npm install --loglevel notice --dev-only --ignore-scripts
      script:
        - npm run lint

    - name: "unit tests"
      language: node_js
      node_js: 10
      cache:
        npm: true
        directories:
          - node_modules
      before_cache:
        - rm -rf node_modules/.cache
      install:
        - npm install --loglevel notice --ignore-scripts
        - npm run bootstrap -- --scope origin --scope origin-dapp --scope origin-contracts
      script:
        - npm run test

    # Run integration tests using docker compose
    - name: "integration tests"
      language: minimal
      sudo: true
      cache:
        bundler: true
        directories:
          - $HOME/docker
      before_cache:
        # Save tagged docker images
        - >
          mkdir -p $HOME/docker && docker images -a --filter='reference=origin' --format '{{.Repository}}:{{.Tag}} {{.ID}}'
          | xargs -n 2 -t sh -c 'test -e $HOME/docker/$1.tar.gz || docker save $0 | gzip -2 > $HOME/docker/$1.tar.gz'
      before_install:
        # Load cached docker images
        - if [[ -d $HOME/docker ]]; then ls $HOME/docker/*.tar.gz | xargs -I {file} sh -c "zcat {file} | docker load"; fi
      before_script:
        # Setting required for Elasticsearch to run
        - sudo sysctl -w vm.max_map_count=262144
      script:
        - docker build . -t origin --cache-from origin:latest
        - docker-compose -f docker-compose.yml -f docker-compose.test.yml up --exit-code-from integration-tests
